<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MMChart - Optimized Mermaid Editor</title>
    
    <!-- CodeMirror CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/theme/material-ocean.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/theme/material-lighter.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/hint/show-hint.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/fold/foldgutter.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/lint/lint.min.css">
    
    <!-- Mermaid -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/mermaid/10.6.1/mermaid.min.js"></script>
    
    <!-- CodeMirror JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/codemirror.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/hint/show-hint.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/fold/foldcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/fold/foldgutter.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/fold/indent-fold.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/edit/matchbrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/edit/closebrackets.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/selection/active-line.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/search/search.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/search/searchcursor.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/dialog/dialog.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/dialog/dialog.min.css"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.16/addon/lint/lint.min.js"></script>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            border: none !important;
            outline: none !important;
            box-shadow: none !important;
        }

        html, body {
            border: none !important;
            outline: none !important;
            box-shadow: none !important;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }

        *:focus {
            outline: none !important;
            border: none !important;
            box-shadow: none !important;
        }

        *::selection {
            background: rgba(100, 255, 218, 0.3) !important;
        }

        *::-moz-selection {
            background: rgba(100, 255, 218, 0.3) !important;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', 'Droid Sans Mono', 'Source Code Pro', monospace;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            overflow: hidden;
            color: #e6edf3;
        }

        /* Header */
        .header {
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            padding: 15px 30px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            z-index: 100;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 10px;
            color: #64ffda;
            font-size: 24px;
            font-weight: bold;
            text-decoration: none;
        }

        .logo:hover {
            color: #4fd3b8;
        }

        .subtitle {
            font-size: 16px;
            font-weight: normal;
            color: rgba(255, 255, 255, 0.8);
            margin-left: 8px;
        }

        .nav-links {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .language-switcher {
            display: flex;
            gap: 5px;
            align-items: center;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            padding: 5px;
        }

        .lang-btn {
            background: transparent;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            padding: 5px 12px;
            border-radius: 15px;
            cursor: pointer;
            font-size: 12px;
            transition: all 0.3s ease;
        }

        .lang-btn.active {
            background: rgba(100, 255, 218, 0.2);
            color: #64ffda;
        }

        .lang-btn:hover {
            color: rgba(255, 255, 255, 0.9);
        }

        .nav-links a {
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            font-size: 14px;
            transition: color 0.3s ease;
        }

        .nav-links a:hover {
            color: #64ffda;
        }

        /* Main container */
        .container {
            display: flex;
            height: calc(100vh - 70px);
            position: relative;
        }

        /* Editor panel */
        .editor-panel {
            width: 20%;
            display: flex;
            flex-direction: column;
            background: rgba(13, 17, 23, 0.95);
            backdrop-filter: blur(20px);
            border-right: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Enhanced editor header */
        .editor-header {
            background: rgba(22, 27, 34, 0.9);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            padding: 12px 20px;
        }

        /* Quick start section */
        .quick-start {
            display: flex;
            align-items: center;
            gap: 8px;
            flex-wrap: wrap;
        }

        .quick-start-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 12px;
            margin-right: 5px;
        }

        /* Button styles */
        .btn {
            padding: 4px 8px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            font-weight: 500;
            transition: all 0.2s ease;
            background: rgba(100, 255, 218, 0.1);
            color: rgba(255, 255, 255, 0.9);
            border: 1px solid rgba(100, 255, 218, 0.3);
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .btn:hover {
            background: rgba(100, 255, 218, 0.2);
            transform: translateY(-1px);
        }

        /* Editor container */
        .editor-container {
            flex: 1;
            position: relative;
            background: #0d1117;
            overflow: hidden;
        }

        /* CodeMirror customization */
        .CodeMirror {
            height: 100% !important;
            font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', 'Droid Sans Mono', 'Source Code Pro', monospace !important;
            font-size: 14px !important;
            line-height: 1.5 !important;
            border: none !important;
            background: transparent !important;
        }

        .CodeMirror-focused .CodeMirror-selected {
            background: rgba(100, 255, 218, 0.1) !important;
        }

        .CodeMirror-line::selection,
        .CodeMirror-line > span::selection,
        .CodeMirror-line > span > span::selection {
            background: rgba(100, 255, 218, 0.2) !important;
        }

        .CodeMirror-gutters {
            background: rgba(22, 27, 34, 0.8) !important;
            border-right: 1px solid rgba(255, 255, 255, 0.1) !important;
            backdrop-filter: blur(10px);
        }

        .CodeMirror-linenumber {
            color: rgba(125, 133, 144, 0.8) !important;
            font-size: 12px !important;
        }

        .CodeMirror-activeline-background {
            background: rgba(100, 255, 218, 0.05) !important;
        }

        .CodeMirror-cursor {
            border-left: 2px solid #64ffda !important;
        }

        /* Enhanced scrollbar */
        .CodeMirror-scrollbar-filler,
        .CodeMirror-gutter-filler {
            background: rgba(22, 27, 34, 0.8) !important;
        }

        .CodeMirror-vscrollbar::-webkit-scrollbar,
        .CodeMirror-hscrollbar::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        .CodeMirror-vscrollbar::-webkit-scrollbar-track,
        .CodeMirror-hscrollbar::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
        }

        .CodeMirror-vscrollbar::-webkit-scrollbar-thumb,
        .CodeMirror-hscrollbar::-webkit-scrollbar-thumb {
            background: rgba(100, 255, 218, 0.3);
            border-radius: 4px;
        }

        .CodeMirror-vscrollbar::-webkit-scrollbar-thumb:hover,
        .CodeMirror-hscrollbar::-webkit-scrollbar-thumb:hover {
            background: rgba(100, 255, 218, 0.5);
        }

        /* Status bar */
        .editor-status {
            background: rgba(22, 27, 34, 0.9);
            backdrop-filter: blur(10px);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
            padding: 8px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 12px;
            color: rgba(255, 255, 255, 0.7);
        }

        .status-left {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .status-right {
            display: flex;
            gap: 15px;
            align-items: center;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .status-indicator.error {
            color: #ff6b6b;
        }

        .status-indicator.success {
            color: #64ffda;
        }

        .status-indicator.warning {
            color: #ffc107;
        }

        /* Preview panel */
        .preview-panel {
            width: 80%;
            display: flex;
            flex-direction: column;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
        }

        .preview-actions {
            padding: 15px 20px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            display: flex;
            gap: 10px;
            justify-content: flex-end;
        }

        .preview-actions .btn {
            background: rgba(0, 0, 0, 0.8);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.2);
            font-weight: 500;
        }

        .preview-actions .btn:hover {
            background: rgba(0, 0, 0, 0.9);
            border-color: rgba(255, 255, 255, 0.3);
        }

        .preview-container {
            flex: 1;
            padding: 20px;
            overflow: auto;
            display: flex;
            align-items: center;
            justify-content: center;
            background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1), transparent);
        }

        #preview {
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            border-radius: 12px;
            overflow: auto;
            padding: 20px;
        }

        #preview svg {
            max-width: 100%;
            max-height: 100%;
            width: auto;
            height: auto;
            min-width: 400px;
            min-height: 300px;
        }

        /* Resizer */
        .resizer {
            width: 6px;
            background: rgba(100, 255, 218, 0.3);
            cursor: col-resize;
            position: relative;
            transition: background-color 0.2s ease;
        }

        .resizer:hover {
            background: rgba(100, 255, 218, 0.5);
        }

        .resizer:active {
            background: rgba(100, 255, 218, 0.7);
        }

        .resizer::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 2px;
            height: 20px;
            background: rgba(100, 255, 218, 0.8);
            border-radius: 1px;
        }

        /* Error and loading styles */
        .loading {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: #666;
            text-align: center;
        }

        .error-message {
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #ff6b6b;
            font-family: monospace;
            white-space: pre-wrap;
        }

        /* Custom syntax highlighting for Mermaid */
        .cm-mermaid-keyword {
            color: #ff7b72 !important;
            font-weight: bold !important;
        }

        .cm-mermaid-diagram-type {
            color: #79c0ff !important;
            font-weight: bold !important;
        }

        .cm-mermaid-arrow {
            color: #64ffda !important;
        }

        .cm-mermaid-node {
            color: #a5d6ff !important;
        }

        .cm-mermaid-string {
            color: #ffa657 !important;
        }

        .cm-mermaid-bracket {
            color: #f0f6fc !important;
        }

        .cm-mermaid-comment {
            color: #7d8590 !important;
            font-style: italic !important;
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            
            .editor-panel,
            .preview-panel {
                width: 100% !important;
                height: 50vh;
            }

            .resizer {
                display: none;
            }

            .editor-header {
                padding: 8px 15px;
            }

            .quick-start {
                margin-top: 5px;
                padding-top: 5px;
            }

            .btn {
                padding: 3px 6px;
                font-size: 10px;
            }
        }

        /* Animation for smooth transitions */
        .CodeMirror, .preview-container {
            transition: all 0.3s ease;
        }

        /* Enhanced autocomplete styling */
        .CodeMirror-hints {
            background: rgba(22, 27, 34, 0.95) !important;
            border: 1px solid rgba(100, 255, 218, 0.3) !important;
            border-radius: 6px !important;
            backdrop-filter: blur(10px) !important;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4) !important;
        }

        .CodeMirror-hint {
            color: #e6edf3 !important;
            padding: 8px 12px !important;
            font-size: 13px !important;
        }

        .CodeMirror-hint-active {
            background: rgba(100, 255, 218, 0.2) !important;
            color: #64ffda !important;
        }
    </style>
</head>
<body>
    <!-- Top navigation -->
    <header class="header">
        <a href="/" class="logo">
            📊 MMChart 
            <span class="subtitle">- <strong>Enhanced Mermaid Editor</strong></span>
        </a>
        <nav class="nav-links">
            <!-- 注释掉语言切换按钮
            <div class="language-switcher">
                <button class="lang-btn active" onclick="switchLanguage('en')">EN</button>
                <button class="lang-btn" onclick="switchLanguage('zh')">中文</button>
            </div>
            -->
            <a href="#about" onclick="showAbout()">About</a>
        </nav>
    </header>

    <!-- Main container -->
    <div class="container">
        <!-- Enhanced Left Editor -->
        <div class="editor-panel" id="editorPanel">
            <!-- Enhanced header with quick start -->
            <div class="editor-header">
                
                <!-- Quick start examples -->
                <div class="quick-start">
                    <span class="quick-start-label">Quick Start:</span>
                    <button class="btn" onclick="loadExample('flowchart')">🔄 Flowchart</button>
                    <button class="btn" onclick="loadExample('sequence')">📋 Sequence</button>
                    <button class="btn" onclick="loadExample('gantt')">📅 Gantt</button>
                    <button class="btn" onclick="loadExample('pie')">🥧 Pie Chart</button>
                    <button class="btn" onclick="loadExample('mindmap')">🧠 Mindmap</button>
                </div>
            </div>
            
            <!-- CodeMirror Editor Container -->
            <div class="editor-container">
                <textarea id="editor"></textarea>
            </div>
            
            <!-- Status bar -->
            <div class="editor-status">
                <div class="status-left">
                    <div class="status-indicator" id="syntaxStatus">
                        <span>●</span>
                        <span id="syntaxText">Ready</span>
                    </div>
                    <div class="status-indicator">
                        <span>Line: <span id="lineNumber">1</span></span>
                    </div>
                    <div class="status-indicator">
                        <span>Col: <span id="colNumber">1</span></span>
                    </div>
                </div>
                <div class="status-right">
                    <div class="status-indicator">
                        <span>Lines: <span id="totalLines">1</span></span>
                    </div>
                    <div class="status-indicator">
                        <span>Chars: <span id="charCount">0</span></span>
                    </div>
                    <div class="status-indicator" id="themeIndicator">
                        <span>🌓 Dark</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Resizer -->
        <div class="resizer" id="resizer"></div>

        <!-- Right preview panel -->
        <div class="preview-panel" id="previewPanel">
            <div class="preview-actions">
                <button class="btn" onclick="renderDiagram()" title="Render chart (Ctrl+Enter)">🎨 Render</button>
                <button class="btn" onclick="zoomOut()" title="Zoom out">🔍︎ Zoom Out</button>
                <button class="btn" onclick="resetZoom()" title="Reset zoom">↻ Reset</button>
                <button class="btn" onclick="zoomIn()" title="Zoom in">🔍︎ Zoom In</button>
                <button class="btn" onclick="downloadSVG()" title="Download SVG">💾 Download</button>
            </div>
            <div class="preview-container">
                <div id="preview">
                    <div class="loading">
                        <h3 style="color: #666; margin-bottom: 10px;">✨ Enhanced Mermaid Editor</h3>
                        <p style="color: #888; margin: 0;">👈 Modern code editor with syntax highlighting</p>
                        <p style="color: #888; margin: 5px 0 0 0;">Try the example buttons or start typing!</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Mermaid
        mermaid.initialize({
            startOnLoad: false,
            theme: 'default',
            themeVariables: {
                primaryColor: '#64ffda',
                primaryTextColor: '#000',
                primaryBorderColor: '#00bcd4',
                lineColor: '#666',
                sectionBkgColor: '#f5f5f5',
                altSectionBkgColor: '#e8f5e8',
                gridColor: '#ddd',
                cScale0: '#64ffda',
                cScale1: '#00bcd4',
                cScale2: '#0097a7'
            }
        });

        // Global variables
        let currentZoom = 1;
        let isDarkTheme = true;
        let editor;
        let renderTimeout;

        // Example codes
        const examples = {
            flowchart: `graph TD
    A[Start] --> B{Condition Met?}
    B -->|Yes| C[Execute Plan A]
    B -->|No| D[Execute Plan B]
    C --> E[Log Result]
    D --> E
    E --> F[End]
    
    style A fill:#64ffda
    style F fill:#ff6b6b`,

            sequence: `sequenceDiagram
    participant User
    participant Frontend
    participant Backend
    participant Database
    
    User->>Frontend: Send Request
    Frontend->>Backend: Forward Request
    Backend->>Database: Query Data
    Database-->>Backend: Return Data
    Backend-->>Frontend: Return Result
    Frontend-->>User: Display Result`,

            gantt: `gantt
    title Project Development Timeline
    dateFormat  YYYY-MM-DD
    section Requirements
    Research           :done,    des1, 2024-01-01,2024-01-15
    Analysis           :done,    des2, 2024-01-16, 10d
    section Design
    UI Design          :active,  des3, 2024-01-20, 20d
    Architecture       :         des4, after des2, 15d
    section Development
    Frontend Dev       :         des5, 2024-02-01, 30d
    Backend Dev        :         des6, 2024-02-01, 25d`,

            pie: `pie title Website Traffic Sources
    "Search Engines" : 45
    "Direct Access" : 25
    "Social Media" : 15
    "Email Marketing" : 10
    "Others" : 5`,

            mindmap: `mindmap
  root((Project))
    Planning
      Research
      Requirements
      Timeline
    Design
      UI/UX
      Architecture
      Prototyping
    Development
      Frontend
        React
        Components
      Backend
        API
        Database
    Testing
      Unit Tests
      Integration
      User Testing`
        };

        // Mermaid language mode for CodeMirror
        CodeMirror.defineMode("mermaid", function() {
            return {
                token: function(stream, state) {
                    // Skip whitespace
                    if (stream.eatSpace()) return null;
                    
                    // Comments
                    if (stream.match(/%%.*$/)) {
                        return "comment";
                    }
                    
                    // Diagram types
                    if (stream.match(/^(graph|flowchart|sequenceDiagram|gantt|pie|gitGraph|erDiagram|journey|mindmap|timeline|quadrantChart|requirementDiagram|c4Context|c4Container|c4Component|c4Dynamic)/)) {
                        return "keyword";
                    }
                    
                    // Direction keywords
                    if (stream.match(/^(TD|TB|BT|RL|LR|subgraph|end|participant|actor|note|loop|alt|else|opt|par|and|rect|activate|deactivate)/)) {
                        return "keyword";
                    }
                    
                    // Arrows and connections
                    if (stream.match(/-->|->|<->|<--|==|==>|<==|==|\.->|\.-|\-\-|::|:::|---|___/)) {
                        return "operator";
                    }
                    
                    // Brackets and parentheses
                    if (stream.match(/[\[\](){}]/)) {
                        return "bracket";
                    }
                    
                    // Strings in quotes
                    if (stream.match(/"([^"\\]|\\.)*"/)) {
                        return "string";
                    }
                    
                    // Node IDs and labels
                    if (stream.match(/[A-Za-z][A-Za-z0-9_]*/)) {
                        return "variable";
                    }
                    
                    // Numbers
                    if (stream.match(/\d+/)) {
                        return "number";
                    }
                    
                    // Default
                    stream.next();
                    return null;
                }
            };
        });

        // Autocomplete hints for Mermaid
        function getMermaidHints(cm, option) {
            const cursor = cm.getCursor();
            const line = cm.getLine(cursor.line);
            const start = cursor.ch;
            let end = cursor.ch;
            
            // Find word boundaries
            while (end < line.length && /\w/.test(line.charAt(end))) ++end;
            while (start && /\w/.test(line.charAt(start - 1))) --start;
            
            const word = line.slice(start, end);
            
            const keywords = [
                // Diagram types
                'graph', 'flowchart', 'sequenceDiagram', 'gantt', 'pie', 'gitGraph', 
                'erDiagram', 'journey', 'mindmap', 'timeline', 'quadrantChart',
                'requirementDiagram', 'c4Context', 'c4Container', 'c4Component',
                
                // Directions
                'TD', 'TB', 'BT', 'RL', 'LR',
                
                // Keywords
                'subgraph', 'end', 'participant', 'actor', 'note', 'loop', 'alt', 
                'else', 'opt', 'par', 'and', 'rect', 'activate', 'deactivate',
                'title', 'dateFormat', 'section', 'click', 'class', 'classDef',
                
                // Common arrows
                '-->', '->', '<->', '<--', '=>', '==>', '<==', '-.->',
                
                // Gantt keywords
                'done', 'active', 'crit', 'after',
                
                // Style keywords
                'fill', 'stroke', 'stroke-width', 'color', 'style'
            ];
            
            const hints = keywords.filter(k => k.toLowerCase().indexOf(word.toLowerCase()) === 0);
            
            return {
                list: hints,
                from: CodeMirror.Pos(cursor.line, start),
                to: CodeMirror.Pos(cursor.line, end)
            };
        }

        // Initialize CodeMirror
        function initEditor() {
            editor = CodeMirror.fromTextArea(document.getElementById('editor'), {
                mode: 'mermaid',
                theme: isDarkTheme ? 'material-ocean' : 'material-lighter',
                lineNumbers: true,
                lineWrapping: false,
                autoCloseBrackets: true,
                matchBrackets: true,
                styleActiveLine: true,
                foldGutter: true,
                gutters: ["CodeMirror-linenumbers", "CodeMirror-foldgutter"],
                extraKeys: {
                    "Ctrl-Space": "autocomplete",
                    "Ctrl-Enter": renderDiagram,
                    "Ctrl-F": "findPersistent",
                    "Ctrl-H": "replace",
                    "F11": function(cm) {
                        cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                    },
                    "Esc": function(cm) {
                        if (cm.getOption("fullScreen")) cm.setOption("fullScreen", false);
                    }
                },
                hintOptions: {
                    hint: getMermaidHints,
                    completeSingle: false
                },
                placeholder: "💡 Start writing Mermaid code here...\n\nTry typing 'graph TD' for a flowchart\nOr click the example buttons above!",
                indentUnit: 4,
                smartIndent: true,
                electricChars: false
            });

            // Event listeners
            editor.on('change', function() {
                updateStatus();
                clearTimeout(renderTimeout);
                renderTimeout = setTimeout(renderDiagram, 1000);
            });

            editor.on('cursorActivity', function() {
                updateCursorPosition();
            });

            // Focus editor
            editor.focus();
        }

        // Update status bar
        function updateStatus() {
            const cursor = editor.getCursor();
            const content = editor.getValue();
            
            document.getElementById('lineNumber').textContent = cursor.line + 1;
            document.getElementById('colNumber').textContent = cursor.ch + 1;
            document.getElementById('totalLines').textContent = editor.lineCount();
            document.getElementById('charCount').textContent = content.length;
            
            // Syntax validation
            validateSyntax(content);
        }

        function updateCursorPosition() {
            const cursor = editor.getCursor();
            document.getElementById('lineNumber').textContent = cursor.line + 1;
            document.getElementById('colNumber').textContent = cursor.ch + 1;
        }

        // Validate Mermaid syntax (basic)
        function validateSyntax(content) {
            const statusEl = document.getElementById('syntaxStatus');
            const textEl = document.getElementById('syntaxText');
            
            if (!content.trim()) {
                statusEl.className = 'status-indicator';
                textEl.textContent = 'Ready';
                return;
            }
            
            // Basic validation
            const diagramTypes = ['graph', 'flowchart', 'sequenceDiagram', 'gantt', 'pie', 'gitGraph', 'erDiagram', 'journey', 'mindmap', 'timeline'];
            const hasValidStart = diagramTypes.some(type => content.trim().startsWith(type));
            
            if (hasValidStart) {
                statusEl.className = 'status-indicator success';
                textEl.textContent = 'Valid';
            } else {
                statusEl.className = 'status-indicator warning';
                textEl.textContent = 'Check syntax';
            }
        }

        // Load examples
        function loadExample(type) {
            if (examples[type]) {
                editor.setValue(examples[type]);
                renderDiagram();
            }
        }

        // Render diagram
        async function renderDiagram() {
            const code = editor.getValue().trim();
            const preview = document.getElementById('preview');
            
            if (!code) {
                preview.innerHTML = `
                    <div class="loading">
                        <h3 style="color: #666; margin-bottom: 10px;">✨ Enhanced Mermaid Editor</h3>
                        <p style="color: #888; margin: 0;">👈 Modern code editor with syntax highlighting</p>
                        <p style="color: #888; margin: 5px 0 0 0;">Try the example buttons or start typing!</p>
                    </div>
                `;
                return;
            }

            preview.innerHTML = `
                <div class="loading">
                    <div style="color: #64ffda; font-size: 16px;">🎨 Rendering chart...</div>
                </div>
            `;

            try {
                const graphDiv = document.createElement('div');
                graphDiv.id = 'mermaid-' + Date.now();
                graphDiv.style.width = '100%';
                graphDiv.style.height = '100%';
                graphDiv.style.display = 'flex';
                graphDiv.style.alignItems = 'center';
                graphDiv.style.justifyContent = 'center';
                
                const { svg } = await mermaid.render(graphDiv.id, code);
                
                preview.innerHTML = '';
                graphDiv.innerHTML = svg;
                preview.appendChild(graphDiv);
                
                const svgElement = graphDiv.querySelector('svg');
                if (svgElement) {
                    svgElement.style.maxWidth = '100%';
                    svgElement.style.maxHeight = '100%';
                    svgElement.style.width = 'auto';
                    svgElement.style.height = 'auto';
                }
                
                applyZoom();
                
                // Update syntax status
                const statusEl = document.getElementById('syntaxStatus');
                const textEl = document.getElementById('syntaxText');
                statusEl.className = 'status-indicator success';
                textEl.textContent = 'Rendered ✓';
                
            } catch (error) {
                console.error('Mermaid rendering error:', error);
                
                preview.innerHTML = `
                    <div class="error-message">
                        <h4 style="margin: 0 0 10px 0; color: #ff6b6b;">⚠️ Rendering Failed</h4>
                        <p style="margin: 0 0 10px 0;">${error.message}</p>
                        <details style="margin-top: 10px;">
                            <summary style="cursor: pointer; color: #999;">View detailed error</summary>
                            <pre style="margin-top: 5px; font-size: 12px; color: #666;">${error.stack || error.message}</pre>
                        </details>
                    </div>
                `;
                
                // Update syntax status
                const statusEl = document.getElementById('syntaxStatus');
                const textEl = document.getElementById('syntaxText');
                statusEl.className = 'status-indicator error';
                textEl.textContent = 'Error';
            }
        }

        // Zoom functions
        function zoomIn() {
            currentZoom *= 1.2;
            applyZoom();
        }

        function zoomOut() {
            currentZoom /= 1.2;
            applyZoom();
        }

        function resetZoom() {
            currentZoom = 1;
            applyZoom();
        }

        function applyZoom() {
            const svgElement = document.querySelector('#preview svg');
            if (svgElement) {
                svgElement.style.transform = `scale(${currentZoom})`;
                svgElement.style.transformOrigin = 'center';
            }
        }

        // Download SVG
        function downloadSVG() {
            const svgElement = document.querySelector('#preview svg');
            if (!svgElement) {
                alert('Please render the chart first');
                return;
            }

            const svgData = new XMLSerializer().serializeToString(svgElement);
            const blob = new Blob([svgData], { type: 'image/svg+xml' });
            const url = URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = 'mermaid-diagram.svg';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Resizer functionality
        function initResizer() {
            const resizer = document.getElementById('resizer');
            const editorPanel = document.getElementById('editorPanel');
            const previewPanel = document.getElementById('previewPanel');
            const container = document.querySelector('.container');
            
            let isResizing = false;
            
            resizer.addEventListener('mousedown', function(e) {
                isResizing = true;
                document.body.style.cursor = 'col-resize';
                document.body.style.userSelect = 'none';
                e.preventDefault();
            });
            
            document.addEventListener('mousemove', function(e) {
                if (!isResizing) return;
                
                const containerRect = container.getBoundingClientRect();
                const containerWidth = containerRect.width - 6;
                const mouseX = e.clientX - containerRect.left;
                
                const newEditorWidth = (mouseX / containerWidth) * 100;
                const newPreviewWidth = 100 - newEditorWidth;
                
                if (newEditorWidth >= 15 && newEditorWidth <= 50) {
                    editorPanel.style.width = newEditorWidth + '%';
                    previewPanel.style.width = newPreviewWidth + '%';
                }
            });
            
            document.addEventListener('mouseup', function() {
                if (isResizing) {
                    isResizing = false;
                    document.body.style.cursor = '';
                    document.body.style.userSelect = '';
                }
            });
            
            resizer.addEventListener('dblclick', function() {
                editorPanel.style.width = '50%';
                previewPanel.style.width = '50%';
            });
        }

        // Language switching (simplified for demo)
        function switchLanguage(lang) {
            const langBtns = document.querySelectorAll('.lang-btn');
            langBtns.forEach(btn => btn.classList.remove('active'));
            document.querySelector(`[onclick="switchLanguage('${lang}')"]`).classList.add('active');
        }

        // About modal functionality
        function showAbout() {
            // Create modal if it doesn't exist
            let modal = document.getElementById('aboutModal');
            if (!modal) {
                modal = document.createElement('div');
                modal.id = 'aboutModal';
                modal.className = 'modal';
                modal.innerHTML = `
                    <div class="modal-content">
                        <span class="close" onclick="closeAbout()">&times;</span>
                        <div class="modal-header">
                            <h2>📊 About MMChart</h2>
                        </div>
                        <div class="modal-body">
                            <p>MMChart is an enhanced online Mermaid chart editor designed for developers and documentation writers.</p>
                            <p>Features:</p>
                            <ul style="margin: 10px 0; padding-left: 20px;">
                                <li>✨ Modern code editor with syntax highlighting</li>
                                <li>🎨 Real-time preview as you type</li>
                                <li>🔍 Smart autocomplete for Mermaid syntax</li>
                                <li>📊 Support for multiple chart types</li>
                                <li>💾 One-click SVG export</li>
                                <li>🌓 Dark/Light theme support</li>
                            </ul>
                            <p>Transform complex ideas into clear charts, making communication more efficient.</p>
                            <div class="contact-info">
                                <h4>📧 Contact Us</h4>
                                <div class="contact-item">
                                    <span>📮</span>
                                    <a href="mailto:contact@mmchart.com">contact@mmchart.com</a>
                                </div>
                                <div class="contact-item">
                                    <span>🌐</span>
                                    <span>Website: <a href="https://www.mmchart.com" target="_blank">www.mmchart.com</a></span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                document.body.appendChild(modal);
                
                // Add modal styles
                if (!document.getElementById('modalStyles')) {
                    const styles = document.createElement('style');
                    styles.id = 'modalStyles';
                    styles.textContent = `
                        .modal {
                            display: none;
                            position: fixed;
                            z-index: 1000;
                            left: 0;
                            top: 0;
                            width: 100%;
                            height: 100%;
                            background-color: rgba(0, 0, 0, 0.8);
                            backdrop-filter: blur(5px);
                        }
                        
                        .modal-content {
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            margin: 5% auto;
                            padding: 0;
                            border-radius: 12px;
                            width: 90%;
                            max-width: 600px;
                            position: relative;
                            color: white;
                        }
                        
                        .modal-header {
                            padding: 30px;
                            text-align: center;
                            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
                        }
                        
                        .modal-header h2 {
                            margin: 0;
                            font-size: 28px;
                            color: #64ffda;
                        }
                        
                        .modal-body {
                            padding: 30px;
                            line-height: 1.8;
                        }
                        
                        .modal-body p {
                            margin-bottom: 20px;
                            font-size: 16px;
                        }
                        
                        .modal-body ul {
                            color: rgba(255, 255, 255, 0.9);
                        }
                        
                        .modal-body li {
                            margin-bottom: 8px;
                        }
                        
                        .contact-info {
                            background: rgba(255, 255, 255, 0.1);
                            padding: 20px;
                            border-radius: 8px;
                            margin-top: 20px;
                        }
                        
                        .contact-info h4 {
                            margin: 0 0 15px 0;
                            color: #64ffda;
                        }
                        
                        .contact-item {
                            display: flex;
                            align-items: center;
                            gap: 10px;
                            margin-bottom: 10px;
                            font-size: 14px;
                        }
                        
                        .contact-item a {
                            color: white;
                            text-decoration: none;
                        }
                        
                        .contact-item a:hover {
                            color: #64ffda;
                        }
                        
                        .close {
                            position: absolute;
                            right: 20px;
                            top: 20px;
                            color: rgba(255, 255, 255, 0.8);
                            font-size: 28px;
                            font-weight: bold;
                            cursor: pointer;
                            width: 30px;
                            height: 30px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            border-radius: 50%;
                            transition: all 0.3s ease;
                        }
                        
                        .close:hover {
                            background: rgba(255, 255, 255, 0.2);
                            color: white;
                        }
                    `;
                    document.head.appendChild(styles);
                }
            }
            
            modal.style.display = 'block';
        }

        function closeAbout() {
            const modal = document.getElementById('aboutModal');
            if (modal) {
                modal.style.display = 'none';
            }
        }

        // Click outside modal to close
        window.onclick = function(event) {
            const modal = document.getElementById('aboutModal');
            if (modal && event.target === modal) {
                modal.style.display = 'none';
            }
        }

        // Initialize everything
        window.addEventListener('load', function() {
            // Initialize editor first
            initEditor();
            initResizer();
            
            // Detect browser language and set default - delay to ensure DOM is ready
            setTimeout(function() {
                const browserLang = navigator.language || navigator.userLanguage;
                const defaultLang = browserLang.startsWith('zh') ? 'zh' : 'en';
                console.log('Detected browser language:', browserLang, '-> Setting to:', defaultLang);
                
                // Set language and update UI
                switchLanguage(defaultLang);
                
                // Load example after language is set
                loadExample('flowchart');
                
                // Auto-update status
                updateStatus();
                
                console.log('✅ Enhanced Mermaid Editor initialized with language:', defaultLang);
            }, 100);
        });
    </script>
</body>
</html>